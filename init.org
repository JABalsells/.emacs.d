
#+TITLE: Joey's Emacs Config
#+Author: Joseph Balsells
#+STARTUP: Overview

[[./images/config-screenshot.png]]

* About

In Emacs, you can use an init.org file instead of (or alongside) the usual =~/.emacs= for your configuration. This approach is called /literate configuration/: you write your setup in an Org file with explanations, and Emacs uses =org-babel-tangle= to extract the code blocks into a separate file—your =init.el=. This way, your configuration is both executable and documented for your future self (and anyone else who looks at it).


Since Emacs loads ~init.el~ automatically, you just need a small ~.emacs~ that loads the Org file. Put this in ~~/.emacs~:

#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-load-file (expand-file-name "init.org"
					 user-emacs-directory))
#+END_SRC

Other people's configurations to lift code from:
- [[https://sophiebos.io/posts/prettifying-emacs-org-mode/][Sophie Bosio]]
- [[https://github.com/larstvei/dot-emacs/blob/master/init.org][Lars Tveito]]
- [[https://github.com/jakebox/jake-emacs][Jacob Boxerman]]
- [[https://github.com/purcell/emacs.d][Steve Purcell]]
- [[https://github.com/rougier][Nicolas Rougier]]

You likely do not want to copy my configuration file, since it's full of idiosyncracies and pretty subjective choices. But I do encourage you to take any bits and pieces that seem interesting, try them out, and incorporate the ones you like into your own config.

* Package Management
Some notes about package initialization.

#+BEGIN_SRC emacs-lisp

  ;; Enable major package archives
  (require 'package)
  (setq package-archives
	'(("gnu"   . "https://elpa.gnu.org/packages/")
	  ("gnu-devel" . "https://elpa.gnu.org/devel/")
	  ("nongnu" . "https://elpa.nongnu.org/nongnu/")
	  ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  ;; Automatically install use-package the first time
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile (require 'use-package))

  ;; every package auto-installs, lazy-loads, then native-compiles
  (setq use-package-always-ensure  t   ; fetch if missing
	use-package-always-defer   t   ; don’t load until needed
	use-package-always-compile t)  ; build .eln/.elc once

#+END_SRC

* Theme

I’m using the =doom-nord= theme, which is part of the [[https://github.com/doomemacs/themes][doom-themes]] package. I find both it and several of the other themes from that pack to be excellent.

Places to find additiional themes:
- [[https://emacsthemes.com/][emacsthemes.com]]
- Prot’s [[https://github.com/protesilaos/modus-themes][Modus]]
- [[https://github.com/protesilaos/ef-themes][Ef themes]].

Packages like [[https://github.com/minad/org-modern][org-modern]] make Org buffers prettier while editing
  #+begin_src emacs-lisp

    (use-package org-modern
      :hook (org-mode . org-modern-mode))

  #+end_src


It’s common to hide emphasis markers (e.g., ~/.../~ for italics, ~*...*~ for bold, etc.) to have a cleaner visual look, but this makes it harder to edit the text. org-appear is the solution to all my troubles. It displays the markers when the cursor is within them and hides them otherwise, making edits easy while looking pretty.

  #+BEGIN_SRC emacs-lisp

    (use-package org-appear
      :commands (org-appear-mode)
      :hook     (org-mode . org-appear-mode)
      :config
      (setq org-hide-emphasis-markers t)  ; Must be activated
      (setq org-appear-autoemphasis   t   ; Show bold, italics, etc.
	    org-appear-autolinks      t   ; Show links
	    org-appear-autosubmarkers t)) ; Show sub- and superscripts

#+END_SRC

* Centering & Linebreaks

  #+begin_src emacs-lisp

    (use-package olivetti
      :hook (org-mode . olivetti-mode))

  #+end_src

* UI Tweaks

Fringes are the thin margins at the left/right edges of GUI Emacs windows where continuation/line-wrap and breakpoint indicators show up.

In terminal (TTY) Emacs, fringes don't exist at all. The terminal can only render the text area. So Emacs just uses the first/last text column to display wrap indicators (=\=,=>=,=<=, etc.). 

#+BEGIN_SRC emacs-lisp
    (setq default-frame-alist '((fullscreen . maximized)))
    (when (display-graphic-p)
      (add-to-list 'default-frame-alist '(undecorated . t)))

    (tool-bar-mode 0)               ;; Disable toolbar
    ;; Disable scroll bar only when in GUI
    (when (display-graphic-p) (scroll-bar-mode 0))
    (menu-bar-mode 0)              ;; Disable menu bar

    (when (display-graphic-p)
      ;; Only works in GUI frames
      (fringe-mode 0)) ;; Set left and right fringe width 0,-1,20 (pixels)
    (blink-cursor-mode 0)          ;; Disable blinking cursor
    (global-visual-line-mode 1)    ;; Enable line wrapping globally
    (set-face-attribute 'default nil :height 150)
    (setq column-number-mode t)
    (show-paren-mode 1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

A better-looking modeline. After installing the nerd-icons package run =M-x nerd-icons-install-fonts=.

  #+begin_src emacs-lisp

    (use-package nerd-icons
      :ensure t
      :if (display-graphic-p))

    (use-package doom-modeline
      :ensure t
      :init
      (setq doom-modeline-icon t)   ;; enable icons
      :hook (after-init . doom-modeline-mode))
  #+end_src


Use a separate file for options set by customize
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

#+begin_src emacs-lisp

  ;; Bookmarks
  ;; C-x r m - RET – bookmark the file that is open right now

  ;; C-x r b – jump to a bookmark - you should bookmark at least one file to go to that file

  ;; C-x r l – list your bookmarks

  (use-package dashboard
    :ensure t
    :demand t                      ;; load now, not lazily
    :init
    (setq dashboard-startup-banner
	  (expand-file-name "images/black-hole.png"
			    user-emacs-directory)
	  dashboard-center-content t
	  dashboard-items '((bookmarks . 5)
			    (projects . 5)
			    (recents  . 5))	  )
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons    t)
    )
  ;; (use-package dashboard
  ;;   :demand t
  ;;   :after (all-the-icons)          ;; icons must be loaded first
  ;;   :hook (dashboard-mode . my/dashboard-extra-keys)
  ;;   :custom
  ;;   ;; ─ Appearance ───────────────────────────────────────────────────────
  ;;   (dashboard-startup-banner
  ;;    (expand-file-name "black-hole.png" user-emacs-directory))
  ;;   (dashboard-center-content t)

  ;;   ;; ─ Content ──────────────────────────────────────────────────────────
  ;;   (dashboard-items '((bookmarks . 5)
  ;; 		       (recents   . 5)))
  ;;   (dashboard-set-heading-icons t)
  ;;   (dashboard-set-file-icons    t)
  ;;   :config
  ;;   (dashboard-setup-startup-hook))

  ;; (defun my/dashboard-extra-keys ()
  ;;   "Extra key bindings in *dashboard*."
  ;;   ;; Quick-find like in Ranger
  ;;   (local-set-key (kbd "/") #'find-file))

#+end_src

#+RESULTS:
: t

* Better completion & buffer switching

  #+begin_src emacs-lisp

    (use-package vertico
      :ensure t
      :bind (:map minibuffer-local-map ()  )
      :init
      (vertico-mode)
      :custom
      (vertico-count 20) ;; Show more candidates
      (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
      )

    (define-key vertico-map (kbd "TAB") #'vertico-insert)
    (define-key vertico-map (kbd "DEL") #'vertico-directory-delete-word)

  #+end_src

** Marginalia

[[https://github.com/minad/marginalia][Marginalia]] gives me annotations in the minibuffer.

#+begin_src emacs-lisp
  (use-package marginalia
    :init 
    (marginalia-mode 1))
#+end_src

** ace-window  

Quickly switch windows.

#+begin_src emacs-lisp

  (use-package ace-window ;; 
    :bind  ("C-x o" . 'ace-window)
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    )

  ;;; ── beacon  ─────────────────────────────────────────────────────────
  (use-package beacon
    :hook (after-init . beacon-mode))
#+end_src

#+begin_src emacs-lisp

  (defun next-code-buffer ()
    (interactive)
    (let (( bread-crumb (buffer-name) ))
      (next-buffer)
      (while
	  (and
	   (or
	    (string-match-p "^\_" (buffer-name))
	    (string-match-p "^\*" (buffer-name)))
	   (not ( equal bread-crumb (buffer-name) )) )
	(next-buffer))))

  (global-set-key (kbd "<C-right>") 'next-code-buffer)

  (defun previous-code-buffer ()
    (interactive)
    (let (( bread-crumb (buffer-name) ))
      (previous-buffer)
      (while
	  (and
	   (or
	    (string-match-p "^\_" (buffer-name))	 
	    (string-match-p "^\*" (buffer-name)))
	   (not ( equal bread-crumb (buffer-name) )) )
	(previous-buffer))))

  (global-set-key (kbd "<C-left>") 'previous-code-buffer)
#+end_src



** PDF Tools

[[https://github.com/vedang/pdf-tools][PDF Tools]] is an improved version of the built-in DocView for viewing PDFs.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :init (pdf-loader-install)
    :hook ((pdf-view-mode . (lambda () (auto-revert-mode -1)))
	   (pdf-view-mode . (lambda () (company-mode -1))))
    :bind (:map pdf-view-mode-map
					  ; ("C-s"   . isearch-forward)
		("C-M-s" . pdf-occur)))
#+end_src

Warn me when a PDF has been opened with the default DocView mode instead of PDF Tools' PDF View mode.

#+begin_src emacs-lisp
  (use-package doc-view
    :hook (doc-view-mode . (lambda ()
			     (display-warning
			      emacs
			      "Oops, using DocView instead of PDF Tools!"
			      :warning))))
#+end_src

[[https://github.com/nicolaisingh/saveplace-pdf-view][saveplace-pdf-view]] is a great package that remembers where in your PDFs you last left off, down to the scroll position and zoom amount.

#+begin_src emacs-lisp
  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+end_src




#+begin_src emacs-lisp
  (defun my-scroll-other-window-previous ()
    (interactive)
    (other-window 1)
    (pdf-view-scroll-down-or-previous-page)
    (other-window 1))
  (defun my-scroll-other-window-next ()
    (interactive)
    (other-window 1)
    (pdf-view-scroll-up-or-next-page)
    (other-window 1))

  (global-set-key (kbd "M-n") 'my-scroll-other-window-next)
  (global-set-key (kbd "M-p") 'my-scroll-other-window-previous)
#+end_src



# ;;; ── Outshine ──────────────────────────────────────────────────────────
# (use-package outshine
#   :hook ((prog-mode . outshine-mode)
#          (text-mode . outshine-mode)))

# ;;; ── Bicycle ───────────────────────────────────────────────────────────
# (use-package bicycle
#   :after outline                   ;; outline must be loaded first
#   :demand t
#   :hook (outline-minor-mode . bicycle-mode)   ; optional
#   :bind (:map outline-minor-mode-map
#               ([C-tab]        . bicycle-cycle)
#               ([C-iso-lefttab] . bicycle-cycle-global)))



# (defun dired-open-file ()
#   "In dired, open the file named on this line."
#   (interactive)
#   (let* ((file (dired-get-filename nil t)))
#     (message "Opening %s..." file)
#     (call-process "xdg-open" nil 0 nil file)
#     (message "Opening %s done" file)))

# (use-package dired
#   :ensure nil
#   :init
#   (dirvish-override-dired-mode)
#   (setq dired-listing-switches "-l --group-directories-first --ignore-backups --ignore=_*")
#   :config
#   (define-key dired-mode-map "z" 'dired-open-file)
#   (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
#   (define-key dired-mode-map (kbd "b") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
#   (define-key dired-mode-map "/" 'dired-narrow)

#   ;; Do not ask whether to use find-alternate-file
#   (put 'dired-find-alternate-file 'disabled nil)
#   ;; Auto-refresh dired on file change
#   (add-hook 'dired-mode-hook 'auto-revert-mode)
#   (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#   (add-hook 'dired-mode-hook 'diredfl-mode)

#   (add-hook 'dired-mode-hook
#             (lambda () (local-set-key (kbd "a") #'dired-find-file)))
#   (add-hook 'dired-mode-hook
#             (lambda () (local-set-key (kbd "RET") #'dired-find-alternate-file)))
#   (add-hook 'dired-mode-hook
#             (lambda () (toggle-truncate-lines)))

#   )





# (setq ispell-dictionary "english")

# (setq help-window-select t)


# (global-set-key (kbd "C-x t") 'hide-mode-line-mode)


# ;; Use my .bashrc:
# ;; Note the absence of '' in the ignore argument. You use these in bash to protect the argument from expansion by the shell before it is ever seen by the ls program. When called from Emacs (via call-process), this does not apply, so if you have '' they will be interpreted literally.
# ;; Sets $MANPATH, $PATH and exec-path from your shell,
# ;; but only when executed in a GUI frame on OS X and Linux.
# (when (memq window-system '(mac ns x))
#   (exec-path-from-shell-initialize))











# ;;;; LaTeX Configurations

# (add-hook 'LaTeX-mode-hook
#            #'TeX-command-run-all)
# ;; (add-hook 'LaTeX-mode-hook
# ;;       (lambda()
# ;;         (local-set-key [C-tab] 'TeX-complete-symbol)))

# ;; Use variable width font faces in current buffer
# (defun my-buffer-face-mode-variable ()
#   "Set font to a variable width (proportional) fonts in current buffer"
#   (interactive)
#   (setq buffer-face-mode-face '(:family "Umpush" :height 130 :width semi-condensed))
#   (buffer-face-mode))




# ;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
# (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
# (add-hook 'LaTeX-mode-hook
# 	  (lambda () (set (make-local-variable 'TeX-electric-math)
# 			  (cons "\\(" "\\)"))))
# ;; (add-hook 'LaTeX-mode-hook
# ;; 	  (lambda () (outshine-mode nil)))
		


# ;; Enable code-folding with prefix C-c @
# ;; C-c @ C-c hides
# ;; C-c @ C-e shows
# (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
# (add-hook 'LaTeX-mode-hook 'outline-hide-body)
# (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)





# (add-hook 'LaTeX-mode-hook 'visual-line-mode)
# ;; Automatically activate TeX-fold-mode.
# (add-hook 'TeX-mode-hook
#           (lambda () (TeX-fold-mode 1)))

# ;; Turn on RefTeX in AUCTeX
# (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
# ;; Activate nice interface between RefTeX and AUCTeX
# (setq reftex-plug-into-AUCTeX t)

# (add-hook 'LaTeX-mode-hook
#       '(lambda ()
#          (TeX-add-symbols '("eqref" TeX-arg-ref (ignore)))))

# (setq-default TeX-master nil)
# (setq TeX-parse-self t); Enable parse on load.
# (setq TeX-auto-save t); Enable parse on save.
# (setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)




# ;; Enable Flyspell mode ; Highlights all misspelled words.
# (add-hook 'TeX-mode-hook 'flyspell-mode)
# (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)

# (defun latex-fold-my-env ()
#   (interactive)
#   (let ((env (read-from-minibuffer "Environment: ")))
#     (save-excursion
#       (goto-char (point-min))
#       (while (search-forward (format "begin{%s}" env) nil t)
#         (TeX-fold-env)))))


# (defun set-window-width (n)
#   "Set the selected window's width."
#   (adjust-window-trailing-edge (selected-window) (- n (window-width)) t))

# (defun set-80-columns ()
#   "Set the selected window to 80 columns."
#   (interactive)
#   (set-window-width 80))


# (defun my-run-python (&optional cmd dedicated show)
#   "Run an inferior Python process.

# Argument CMD defaults to `python-shell-calculate-command' return
# value.  When called interactively with `prefix-arg', it allows
# the user to edit such value and choose whether the interpreter
# should be DEDICATED for the current buffer.  When numeric prefix
# arg is other than 0 or 4 do not SHOW.

# For a given buffer and same values of DEDICATED, if a process is
# already running for it, it will do nothing.  This means that if
# the current buffer is using a global process, the user is still
# able to switch it to use a dedicated one.

# Runs the hook `inferior-python-mode-hook' after
# `comint-mode-hook' is run.  (Type \\[describe-mode] in the
# process buffer for a list of commands.)"
#   (interactive
#    (if current-prefix-arg
#        (list
#         (read-shell-command "Run Python: " (python-shell-calculate-command))
#         (y-or-n-p "Make dedicated process? ")
#         (= (prefix-numeric-value current-prefix-arg) 4))
#      (list (python-shell-calculate-command) nil t)))
#   (let ((buffer
#          (python-shell-make-comint
#           (or cmd (python-shell-calculate-command))
#           (python-shell-get-process-name dedicated) show)))
#     (display-buffer buffer)
#     (get-buffer-process buffer)))


# (defun my-python-hook ()
#   ;(my-run-python)
#   (hs-minor-mode)
#   (hs-hide-all)
# 					;(set-80-columns)
#   )

# (add-hook 'python-mode-hook #'my-python-hook)

# (setq python-shell-interpreter
#       "/home/joseph/.anaconda3/bin/ipython")
# (setq python-shell-interpreter-args "--simple-prompt -i")




# (defun close-and-kill-this-pane ()
#   "If there are multiple windows, then close this pane and kill the buffer in it also."
#   (interactive)
#   (kill-this-buffer)
#   (if (not (one-window-p))
#       (delete-window)))

# (defun close-and-kill-next-pane ()
#   "If there are multiple windows, then close the other pane and kill the buffer in it also."
#   (interactive)
#   (other-window 1)
#   (kill-this-buffer)
#   (if (not (one-window-p))
#       (delete-window)))

# (global-set-key (kbd "C-x 4 0") 'close-and-kill-this-pane)
# (global-set-key (kbd "C-x 4 1") 'close-and-kill-next-pane)



# ;;; yas
# ;; (add-to-list 'load-path
# ;;              "/home/joseph/.emacs.d/elpa/yasnippet-20200604.246")
# (use-package yasnippet
#   :hook (after-init . yas-global-mode))

# (yas-global-mode 1)
 







# (defun completion-f-n-table-ignoring-dot-prefix (fun str pred flag)
#   "Call `completion-file-name-table' with a predicate that
# ignores matches starting with a dot, unless STR starts with a
# dot."
#   (funcall fun str
#            (cond ((string-prefix-p "." (file-name-nondirectory str))
#                   pred)
#                  ((not pred)
#                   (lambda (str)
#                     (not (string-prefix-p "." str))))
#                  (t
#                   (lambda (str)
#                     (and (not (string-prefix-p "." str))
#                          (funcall pred str)))))
#            flag))

# (advice-add 'completion-file-name-table :around
#             'completion-f-n-table-ignoring-dot-prefix)

# ;; dired-toggle       20190616.303  installed             Show dired as sidebar and will not create new buffers when changing dir
# (use-package dired-toggle
#   :defer t
#   :bind (("C-x C-n" . #'dired-toggle)
#          :map dired-mode-map
#          ("q" . #'dired-toggle-quit)
#          ([remap dired-find-file] . #'dired-toggle-find-file)
#          ([remap dired-up-directory] . #'dired-toggle-up-directory)
#          ("C-c C-u" . #'dired-toggle-up-directory))
#   :config
#   (setq dired-toggle-window-size 32)
#   (setq dired-toggle-window-side 'left)

#   ;; Optional, enable =visual-line-mode= for our narrow dired buffer:
#   ;; (add-hook 'dired-toggle-mode-hook
#   ;;           (lambda () (interactive)
#   ;;             (visual-line-mode 1)
#   ;;             (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
#   ;;             (setq-local word-wrap nil)))
#   )


# ;; (use-package dired
# ;;   :config
# ;;   (define-key dired-mode-map "z" 'dired-open-file)
# ;;   (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
# ;;   (define-key dired-mode-map (kbd "b") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
# ;;   (define-key dired-mode-map "/" 'dired-narrow)
# ;;   )
# ;; (with-eval-after-load 'dired
# ;;   (define-key dired-mode-map "z" 'dired-open-file)
# ;;   (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
# ;;   (define-key dired-mode-map (kbd "b") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
# ;;   (define-key dired-mode-map "/" 'dired-narrow)
# ;;   )



# (split-window-right)

* Exporting =init.org=

The package =htmlize= allows you to export ~init.org~ to HTML with ~C-c C-e h h~

  #+begin_src emacs-lisp
    (use-package htmlize
      :ensure t)
  #+end_src

This package can be paired with CSS styling.

* CSS Styling
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")  ;; or your browser


  (require 'ox-html)

  ;; Ensure htmlize is installed so exports use token classes
  (setq org-html-htmlize-output-type 'css)

  ;; Don’t include the default Org CSS/JS
  (setq org-html-head-include-default-style nil)
  (setq org-html-head-include-scripts nil)

  (setq org-html-htmlize-output-type 'css) ; use CSS classes
  (setq org-html-head-include-default-style nil)
  (setq org-html-head-include-scripts nil)

  (setq org-html-head
	"<meta name='viewport' content='width=device-width, initial-scale=1'>
      <style>
      /* --- Terminal-like look --- */
      body {
	background: #1e1e1e;
	color: #d4d4d4;
	font-family: 'Fira Code', 'JetBrains Mono', 'Source Code Pro', monospace;
	line-height: 1.5;
	max-width: 860px;
	margin: 2rem auto;
	padding: 0 1rem;
      }
      h1,h2,h3,h4 {
	font-family: inherit;
	color: #00ff7f;
	border-left: 3px solid #00ff7f;
	padding-left: .5rem;
      }
      a {
	color: #569cd6;
	text-decoration: none;
      }
      a:hover { text-decoration: underline; }

      /* --- TOC --- */
      #table-of-contents {
	background: #252526;
	border: 1px solid #333;
	padding: .75rem 1rem;
	border-radius: .5rem;
      }
      #table-of-contents h2 { color: #9cdcfe; border: none; }

      /* --- Code blocks --- */
      pre.src {
	background: #0c0c0c;
	color: #d4d4d4;
	padding: .8rem 1rem;
	border-radius: .5rem;
	border: 1px solid #333;
	overflow-x: auto;
      }
      pre.src:before {
	content: attr(class);
	float: right;
	font-size: .75rem;
	color: #888;
	text-transform: uppercase;
      }
      code, tt {
	background: #252526;
	padding: .1rem .3rem;
	border-radius: .3rem;
	font-family: inherit;
      }

      /* --- Syntax colors from htmlize --- */
      .org-keyword        { color: #569cd6; }
      .org-function-name  { color: #dcdcaa; }
      .org-variable-name  { color: #9cdcfe; }
      .org-string         { color: #ce9178; }
      .org-constant       { color: #4ec9b0; }
      .org-type           { color: #4ec9b0; }
      .org-builtin        { color: #c586c0; }
      .org-comment        { color: #6a9955; font-style: italic; }

      /* --- Tables --- */
      table { border-collapse: collapse; margin: 1rem 0; }
      th, td { border: 1px solid #333; padding: .4rem .6rem; }
      th { background: #252526; color: #00ff7f; }

      </style>")
#+END_SRC

#+RESULTS:
#+begin_example
<meta name='viewport' content='width=device-width, initial-scale=1'>
    <style>
    /* --- Terminal-like look --- */
    body {
      background: #1e1e1e;
      color: #d4d4d4;
      font-family: 'Fira Code', 'JetBrains Mono', 'Source Code Pro', monospace;
      line-height: 1.5;
      max-width: 860px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
    h1,h2,h3,h4 {
      font-family: inherit;
      color: #00ff7f;
      border-left: 3px solid #00ff7f;
      padding-left: .5rem;
    }
    a {
      color: #569cd6;
      text-decoration: none;
    }
    a:hover { text-decoration: underline; }

    /* --- TOC --- */
    #table-of-contents {
      background: #252526;
      border: 1px solid #333;
      padding: .75rem 1rem;
      border-radius: .5rem;
    }
    #table-of-contents h2 { color: #9cdcfe; border: none; }

    /* --- Code blocks --- */
    pre.src {
      background: #0c0c0c;
      color: #d4d4d4;
      padding: .8rem 1rem;
      border-radius: .5rem;
      border: 1px solid #333;
      overflow-x: auto;
    }
    pre.src:before {
      content: attr(class);
      float: right;
      font-size: .75rem;
      color: #888;
      text-transform: uppercase;
    }
    code, tt {
      background: #252526;
      padding: .1rem .3rem;
      border-radius: .3rem;
      font-family: inherit;
    }

    /* --- Syntax colors from htmlize --- */
    .org-keyword        { color: #569cd6; }
    .org-function-name  { color: #dcdcaa; }
    .org-variable-name  { color: #9cdcfe; }
    .org-string         { color: #ce9178; }
    .org-constant       { color: #4ec9b0; }
    .org-type           { color: #4ec9b0; }
    .org-builtin        { color: #c586c0; }
    .org-comment        { color: #6a9955; font-style: italic; }

    /* --- Tables --- */
    table { border-collapse: collapse; margin: 1rem 0; }
    th, td { border: 1px solid #333; padding: .4rem .6rem; }
    th { background: #252526; color: #00ff7f; }

    </style>
#+end_example
